import tkinter as tk
from tkinter import messagebox
import random

# ---------------------- CORE FUNCTIONALITY ----------------------

def toss_coin():
    return random.choice(['Heads', 'Tails'])

def simulate_tosses(num_flips):
    results = {'Heads': 0, 'Tails': 0}
    for _ in range(num_flips):
        result = toss_coin()
        results[result] += 1
    return results

def display_results(results, total_flips):
    heads = results['Heads']
    tails = results['Tails']
    print("\nResults:")
    print(f"Heads: {heads} ({(heads / total_flips) * 100:.2f}%)")
    print(f"Tails: {tails} ({(tails / total_flips) * 100:.2f}%)")

# ---------------------- CONSOLE VERSION ----------------------

def run_console():
    print("Welcome to the Virtual Coin Toss Simulator!\n")
    
    session_history = []

    while True:
        try:
            flips = int(input("How many times would you like to flip the coin? "))
            if flips < 1:
                print("Please enter a number greater than 0.")
                continue
        except ValueError:
            print("Invalid input. Please enter a valid integer.")
            continue

        results = simulate_tosses(flips)
        display_results(results, flips)
        session_history.append((flips, results))

        again = input("\nDo you want to run another session? (yes/no): ").strip().lower()
        if again not in ['yes', 'y']:
            print("\nSession Summary:")
            for idx, (count, res) in enumerate(session_history, 1):
                print(f"Session {idx}: {count} flips â†’ Heads: {res['Heads']}, Tails: {res['Tails']}")
            print("\nThanks for using the Coin Toss Simulator. Goodbye!")
            break

# ---------------------- GUI VERSION ----------------------

class CoinTossApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Virtual Coin Toss Simulator")
        self.root.geometry("400x350")
        
        self.session_history = []

        self.label = tk.Label(root, text="Enter number of coin flips:", font=("Arial", 12))
        self.label.pack(pady=10)

        self.entry = tk.Entry(root, font=("Arial", 12))
        self.entry.pack(pady=5)

        self.button = tk.Button(root, text="Flip!", command=self.flip_coins, font=("Arial", 12))
        self.button.pack(pady=10)

        self.result_label = tk.Label(root, text="", font=("Arial", 12))
        self.result_label.pack(pady=10)

        self.history_button = tk.Button(root, text="Show History", command=self.show_history, font=("Arial", 12))
        self.history_button.pack(pady=5)

        self.reset_button = tk.Button(root, text="Reset", command=self.reset, font=("Arial", 12))
        self.reset_button.pack(pady=5)

    def flip_coins(self):
        try:
            flips = int(self.entry.get())
            if flips < 1:
                raise ValueError

            results = simulate_tosses(flips)
            self.session_history.append((flips, results))

            head_percent = (results['Heads'] / flips) * 100
            tail_percent = (results['Tails'] / flips) * 100

            self.result_label.config(text=f"Heads: {results['Heads']} ({head_percent:.2f}%)\n"
                                          f"Tails: {results['Tails']} ({tail_percent:.2f}%)")
        except ValueError:
            messagebox.showerror("Invalid input", "Please enter a positive integer.")

    def show_history(self):
        if not self.session_history:
            messagebox.showinfo("History", "No session history available yet.")
            return

        history_text = ""
        for idx, (flips, res) in enumerate(self.session_history, 1):
            history_text += f"Session {idx}: {flips} flips â†’ Heads: {res['Heads']}, Tails: {res['Tails']}\n"
        messagebox.showinfo("Session History", history_text)

    def reset(self):
        self.entry.delete(0, tk.END)
        self.result_label.config(text="")

# ---------------------- MAIN SELECTOR ----------------------

def main():
    try:
        print("Launching GUI...")
        root = tk.Tk()
        app = CoinTossApp(root)
        root.mainloop()
    except Exception as e:
        print(f"GUI failed to launch: {e}")
        print("Falling back to console mode.\n")
        run_console()

if __name__ == "__main__":
    main()
